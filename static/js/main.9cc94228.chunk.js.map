{"version":3,"sources":["utils/goToPage.js","utils/range.js","utils/getPagesLayout.js","components/Pagination.jsx","components/CountryCard.jsx","App.js","serviceWorker.js","index.js"],"names":["goToPage","page","state","pageLimit","currentPage","Math","max","min","totalPages","offset","currentCountries","allCountries","slice","console","log","Object","objectSpread","range","start","end","step","arguments","length","undefined","arr","i","push","getPagesLayout","_ref","_ref$currentPage","_ref$pageLimit","_ref$pageNeighbours","pageNeighbours","_ref$totalRecord","totalRecord","ceil","totalNumbers","leftBound","rightBound","beforeLastPage","startPage","endPage","pages","concat","pagOffset","hasSpillLeft","hasSpillRight","extraPages","toConsumableArray","Pagination","props","getPageLayout","react_default","a","createElement","Fragment","aria-label","className","onClick","map","key","data-id","aria-hidden","btnActive","CountryCard","country","_ref$cca","cca2","code2","_ref$region","region","_ref$name","name","react_flags_default","format","pngSize","basePath","common","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_Countries$findAll$da","Countries","findAll","data","setState","e","preventDefault","target","closest","dataset","id","result","_this2","_this$state","totalCountries","components_Pagination","handleNavClick","components_CountryCard","cca3","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cc94228.chunk.js","sourcesContent":["function goToPage(page, state, pageLimit) {\n    const currentPage = Math.max(1, Math.min(page, state.totalPages));\n\n    const offset = (currentPage - 1) * pageLimit;\n\n    const currentCountries = state.allCountries.slice(offset, offset + pageLimit);\n    console.log({\n        ...state,\n        currentCountries,\n        currentPage\n    });\n    return {\n        ...state,\n        currentCountries,\n        currentPage\n    }\n}\n\nexport default goToPage;","function range(start, end, step = 1) {\n\n    let arr = [];\n\n    for(let i = start; i <= end; i += step ) {\n        arr.push(i);\n    }\n\n    return arr;\n}\n\nexport default range;","import range from \"./range\";\n\nfunction getPagesLayout({\n    currentPage = 1, \n    pageLimit = 30, \n    pageNeighbours = 1, \n    totalRecord=0}) {\n  \n  const totalPages = Math.ceil(totalRecord / pageLimit);\n  \n  const totalNumbers = (pageNeighbours * 2) + 3;\n  const totalBlocks = totalNumbers + 2;\n\n  if(totalBlocks < totalPages) {\n\n    const leftBound = currentPage - pageNeighbours;\n    const rightBound = currentPage + pageNeighbours;\n    const beforeLastPage = totalPages - 1;\n\n    const startPage = Math.max(2, leftBound);\n    const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n \n    let pages = range(startPage, endPage);\n\n    console.log(`pages ${pages}`);\n\n    const pagOffset = totalNumbers - pages.length - 1;\n\n    console.log(`pagOffset ${pagOffset}`);\n\n    const hasSpillLeft = startPage > 2;\n    const hasSpillRight = endPage < beforeLastPage;\n\n    if(hasSpillLeft && !hasSpillRight) {\n        const extraPages = range(startPage - pagOffset, startPage - 1);\n        pages = [\"Left\", ...extraPages, ...pages];\n    }\n    if(!hasSpillLeft && hasSpillRight) {\n        const extraPages = range(endPage + 1, endPage + pagOffset);\n        pages = [...pages, ...extraPages, \"Right\"];\n    } \n    if(hasSpillLeft && hasSpillRight) {\n        pages = [\"Left\", ...pages, \"Right\"];\n    }\n\n    return [1, ...pages, totalPages];\n  }\n  return [...range(1, totalPages)];\n}\n\nexport default getPagesLayout;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport getPageLayout from \"../utils/getPagesLayout\";\n\nconst Pagination = props => {\n  console.log(props);\n  const pages = getPageLayout(props);\n\n  return (\n    <>\n      <nav aria-label=\"Page navigation example\">\n        <ul\n          className=\"pagination\"\n          onClick={props.onClick}\n        >\n          {pages.map((page, i) => {\n            if (page === \"Left\") {\n              return (\n                <li className=\"page-item\" key={i} data-id=\"Left\">\n                  <button className=\"page-link\"  aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">&laquo;</span>\n                    <span className=\"sr-only\">Previous</span>\n                  </button>\n                </li>\n              );\n            }\n            if (page === \"Right\") {\n              return (\n                <li className=\"page-item\" key={i} data-id=\"Right\">\n                  <button className=\"page-link\" aria-label=\"Next\">\n                    <span aria-hidden=\"true\">&raquo;</span>\n                    <span className=\"sr-only\">Next</span>\n                  </button>\n                </li>\n              );\n            }\n\n            const btnActive = props.currentPage === +page ? \"page-link btn-active\" : \"page-link\";\n\n            return (\n              <li className=\"page-item\" key={i} data-id={+page}>\n                <button className={btnActive}>\n                  {page}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n    </>\n  );\n};\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Flag from \"react-flags\";\n\n\nconst CountryCard = props => {\n    const { cca2: code2 = '', region = null, name = {}  } = props.country || {};\n    \n    return (\n      <div className=\"col-sm-6 col-md-4 country-card\">\n        <div className=\"country-card-container border-gray rounded border mx-2 my-3 d-flex flex-row align-items-center p-0 bg-light\">\n  \n          <div className=\"h-100 position-relative border-gray border-right px-2 bg-white rounded-left\">\n  \n            <Flag country={code2} format=\"png\" pngSize={64} basePath=\"./img/flags\" className=\"d-block h-100\" />\n  \n          </div>\n  \n          <div className=\"px-3\">\n  \n            <span className=\"country-name text-dark d-block font-weight-bold\">{ name.common }</span>\n  \n            <span className=\"country-region text-secondary text-uppercase\">{ region }</span>\n  \n          </div>\n  \n        </div>\n      </div>\n    )\n  }\n  \n  CountryCard.propTypes = {\n    country: PropTypes.shape({\n      cca2: PropTypes.string.isRequired,\n      region: PropTypes.string.isRequired,\n      name: PropTypes.shape({\n        common: PropTypes.string.isRequired\n      }).isRequired\n    }).isRequired\n  };\n  \n  export default CountryCard;","import React, { Component } from \"react\";\nimport Countries from \"countries-api\";\n\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport goToPage from \"./utils/goToPage\";\n\nimport Pagination from \"./components/Pagination\";\nimport CountryCard from \"./components/CountryCard\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.pageLimit = 18;\n    this.pageNeighbours = 1;\n    this.state = {\n      allCountries: [],\n      currentCountries: [],\n      currentPage: 1,\n      totalPages: null\n    };\n  }\n\n  componentDidMount() {\n    const { data: allCountries = [] } = Countries.findAll();\n    this.setState({\n      allCountries,\n      currentCountries: allCountries.slice(0, this.pageLimit),\n      totalPages: Math.ceil(allCountries.length / this.pageLimit)\n    });\n  }\n\n  handleNavClick(e) {\n    e.preventDefault();\n\n    const target = e.target.closest(\"li\");\n\n    if (!target) return;\n\n    if (target.dataset.id === \"Left\") {\n      let result = goToPage(\n        this.state.currentPage - this.pageNeighbours * 2 - 1,\n        this.state,\n        this.pageLimit\n      );\n\n      this.setState({\n        ...result\n      });\n      return;\n    }\n\n    if (target.dataset.id === \"Right\") {\n      let result = goToPage(\n        this.state.currentPage + this.pageNeighbours * 2 + 1,\n        this.state,\n        this.pageLimit\n      );\n\n      this.setState({\n        ...result\n      });\n      return;\n    }\n\n    if (typeof +target.dataset.id === \"number\") {\n      const page = target.dataset.id;\n\n      const result = goToPage(page, this.state, this.pageLimit);\n\n      this.setState({\n        ...result\n      });\n      return;\n    }\n  }\n\n  render() {\n    const {\n      allCountries,\n      currentCountries,\n      currentPage,\n      totalPages\n    } = this.state;\n\n    const totalCountries = allCountries.length;\n\n    console.log(this.state);\n\n    if (totalCountries === 0) return null;\n\n    return (\n      <div className=\"container-fluid px-5 py-3 text-center\">\n        <header className=\"container\">\n          <h1 className=\"text-primary\">React Pagination App</h1>\n        </header>\n        <div className=\"app__content row d-flex flex-column px-2 py-2 justify-content-around\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"app__inform-block d-flex flex-row\">\n              <h3 className=\"d-flex align-items-center pr-2 text-secondary border-right border-gray \">\n                <span className=\"font-weight-bold d-inline-block pr-2\">{totalCountries + \" \"}</span>\n                Coutries\n              </h3>\n              <h3 className=\"d-flex align-items-center pl-2\">\n                Page <span className=\"d-inline-block pl-2\">{currentPage}</span> / <span>{totalPages}</span>\n              </h3>\n            </div>\n            <Pagination\n              currentPage={currentPage}\n              pageLimit={this.pageLimit}\n              pageNeighbours={this.pageNeighbours}\n              totalRecord={+totalCountries}\n              onClick={e => this.handleNavClick(e)}\n            />\n          </div>\n          <div className=\"row\">\n            {currentCountries.map(country => (\n              <CountryCard key={country.cca3} country={country} />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}